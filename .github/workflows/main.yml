name: Deploy to GitHub Pages
on:
  push:
    branches: [main, master]
  workflow_dispatch:
permissions:
  contents: write
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: cypress-binary-${{ hashFiles('package-lock.json') }}
          restore-keys: cypress-binary-
      - name: Run Cypress tests
        uses: cypress-io/github-action@v5
        with:
          build: npm run build
          start: npm run dev
          wait-on: "http://localhost:5173"
        continue-on-error: true # Permite continuar incluso si los tests fallan
        id: cypress
      - name: Upload screenshots on failure
        uses: actions/upload-artifact@v4
        if: steps.cypress.outcome == 'failure'
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: ignore
      - name: Upload videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos
          if-no-files-found: ignore
      # Marca el job como fallido pero permite que contin√∫e el flujo de trabajo
      - name: Mark test job as failed
        if: steps.cypress.outcome == 'failure'
        run: echo "::warning::Cypress tests failed but workflow will continue"
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Cache build
        uses: actions/cache@v3
        with:
          path: |
            node_modules/.vite
            dist
          key: build-${{ github.sha }}
          restore-keys: |
            build-
      - name: Build
        run: npm run build
        env:
          VITE_TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      - name: Create 404 page
        run: cp dist/index.html dist/404.html
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist
  report:
    needs: build
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: cypress-videos
          path: cypress/videos
        continue-on-error: true

      - name: Download screenshots if available
        uses: actions/download-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots
        continue-on-error: true
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # Instalamos herramientas para generar reportes
      - name: Install reporting tools
        run: |
          echo "Instalando herramientas necesarias para reportes"
          # Asegurarnos de que curl est√° disponible
          which curl || apt-get update && apt-get install -y curl
          # Asegurarnos de que jq est√° disponible para procesar JSON
          which jq || apt-get install -y jq
        continue-on-error: true

      # Generar un reporte de an√°lisis de tests
      - name: Generate Test Analysis Report
        run: |
          mkdir -p reports
          echo "# Reporte de An√°lisis de Tests" > reports/test-report.md
          echo "## Generado el $(date)" >> reports/test-report.md
          echo "## Resultados de los Tests" >> reports/test-report.md

          # An√°lisis simple de archivos de video
          if [ -d "cypress/videos" ]; then
            echo "### Videos de Tests Encontrados:" >> reports/test-report.md
            ls -la cypress/videos >> reports/test-report.md
            
            # Contador de tests
            TEST_COUNT=$(ls -1 cypress/videos/*.mp4 2>/dev/null | wc -l)
            echo "### Resumen" >> reports/test-report.md
            echo "- Total de tests ejecutados: $TEST_COUNT" >> reports/test-report.md
            
            # Analiza si hay tests fallidos basados en la duraci√≥n
            FAILED_COUNT=0
            for video in cypress/videos/*.mp4; do
              if [ -f "$video" ]; then
                SIZE=$(stat -c%s "$video")
                if [ "$SIZE" -lt 1000 ]; then
                  ((FAILED_COUNT++))
                fi
              fi
            done
            
            echo "- Tests posiblemente fallidos: $FAILED_COUNT" >> reports/test-report.md
            echo "- Tasa de √©xito estimada: $(( 100 - ($FAILED_COUNT * 100 / $TEST_COUNT) ))%" >> reports/test-report.md
          else
            echo "No se encontraron videos de tests" >> reports/test-report.md
          fi
        continue-on-error: true

      # Generar un reporte de an√°lisis de c√≥digo usando Gemini API
      - name: Generate Gemini Code Analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          mkdir -p reports

          echo "# An√°lisis de C√≥digo por IA" > reports/code-quality-report.md
          echo "## Generado el $(date)" >> reports/code-quality-report.md

          # Verificar si la clave API est√° disponible
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "## Error: Clave API de Gemini no configurada" >> reports/code-quality-report.md
            echo "Por favor, configura el secreto GEMINI_API_KEY en la configuraci√≥n del repositorio." >> reports/code-quality-report.md
            # Continuar con las m√©tricas b√°sicas
          else
            # Recolectar archivos de c√≥digo para analizar (limitado a 5 archivos para evitar l√≠mites de API)
            echo "## Archivos analizados" >> reports/code-quality-report.md
            
            # Crear un directorio temporal para los archivos a analizar
            mkdir -p temp_analysis
            
            # Seleccionar hasta 5 archivos JavaScript/TypeScript principales para an√°lisis
            find src -type f \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" \) -not -path "*/node_modules/*" | head -5 > file_list.txt
            
            # Por cada archivo seleccionado
            cat file_list.txt | while read file_path; do
              # Verificar que el archivo existe
              if [ -f "$file_path" ]; then
                echo "- Analizando: $file_path" >> reports/code-quality-report.md
                
                # Leer contenido del archivo
                FILE_CONTENT=$(cat "$file_path")
                
                # Solicitud a la API de Gemini para an√°lisis de c√≥digo
                API_RESPONSE=$(curl -s "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=$GEMINI_API_KEY" \
                  -H 'Content-Type: application/json' \
                  -X POST \
                  -d "{
                    \"contents\": [{
                      \"parts\":[{
                        \"text\": \"Analiza este c√≥digo y proporciona un reporte de calidad. Identifica problemas potenciales, mejores pr√°cticas, complejidad, y sugerencias de mejora. Responde en formato markdown.\n\n\`\`\`\n$FILE_CONTENT\n\`\`\`\"
                      }]
                    }]
                  }")
                
                # Extraer el texto generado de la respuesta usando jq si est√° disponible
                if command -v jq &> /dev/null; then
                  ANALYSIS=$(echo $API_RESPONSE | jq -r '.candidates[0].content.parts[0].text' 2>/dev/null)
                  # Si falla jq, intentar con grep como respaldo
                  if [ -z "$ANALYSIS" ]; then
                    ANALYSIS=$(echo $API_RESPONSE | grep -o '"text": "[^"]*"' | sed 's/"text": "\(.*\)"/\1/' | sed 's/\\n/\n/g')
                  fi
                else
                  ANALYSIS=$(echo $API_RESPONSE | grep -o '"text": "[^"]*"' | sed 's/"text": "\(.*\)"/\1/' | sed 's/\\n/\n/g')
                fi
                
                # Escribir an√°lisis al reporte
                echo "### An√°lisis de $file_path" >> reports/code-quality-report.md
                echo "$ANALYSIS" >> reports/code-quality-report.md
                echo "" >> reports/code-quality-report.md
                echo "---" >> reports/code-quality-report.md
                
                # Esperar un segundo para evitar l√≠mites de tasa de la API
                sleep 1
              fi
            done
          fi

          # A√±adir m√©tricas b√°sicas de c√≥digo
          echo "## M√©tricas de C√≥digo" >> reports/code-quality-report.md
          echo "### Conteo de archivos por tipo" >> reports/code-quality-report.md
          find src -type f | grep -v "node_modules" | sort | awk -F. '{print $NF}' | sort | uniq -c | sort -nr >> reports/code-quality-report.md

          echo "### L√≠neas de c√≥digo (estimado)" >> reports/code-quality-report.md
          find src -type f -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | xargs wc -l 2>/dev/null || echo "No se pudieron contar l√≠neas" >> reports/code-quality-report.md
        continue-on-error: true
      # Crear un reporte HTML combinado
      - name: Create HTML Report
        run: |
          mkdir -p reports
          cat > reports/index.html << EOL
          <!DOCTYPE html>
          <html lang="es">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Reporte de An√°lisis Automatizado</title>
            <style>
              body { font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }
              h1 { color: #333; border-bottom: 2px solid #eee; padding-bottom: 10px; }
              .report-container { display: flex; flex-wrap: wrap; gap: 20px; }
              .report-card { flex: 1; min-width: 300px; border: 1px solid #ddd; border-radius: 8px; padding: 15px; margin-bottom: 20px; }
              .report-card h2 { margin-top: 0; color: #0066cc; }
              pre { background: #f5f5f5; padding: 10px; border-radius: 5px; overflow-x: auto; }
              .summary { background: #f0f7ff; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
              .timestamp { color: #666; font-style: italic; font-size: 0.9em; }
            </style>
          </head>
          <body>
            <h1>Reporte de An√°lisis Automatizado</h1>
            <div class="timestamp">Generado el $(date)</div>
            
            <div class="summary">
              <h2>Resumen Ejecutivo</h2>
              <p>Este reporte combina an√°lisis de pruebas automatizadas y calidad de c√≥digo para proporcionar una visi√≥n general del estado del proyecto.</p>
            </div>
            
            <div class="report-container">
              <div class="report-card">
                <h2>An√°lisis de Tests</h2>
                <div id="test-content">Cargando...</div>
              </div>
              
              <div class="report-card">
                <h2>An√°lisis de C√≥digo por IA</h2>
                <div id="code-content">Cargando...</div>
              </div>
            </div>
            
            <script>
              // Cargar contenido de markdown
              async function loadMarkdown(file, elementId) {
                try {
                  const response = await fetch(file);
                  const text = await response.text();
                  document.getElementById(elementId).innerHTML = text;
                } catch (error) {
                  document.getElementById(elementId).innerHTML = 'Error cargando reporte: ' + error;
                }
              }
              
              // Cargar reportes
              loadMarkdown('test-report.md', 'test-content');
              loadMarkdown('code-quality-report.md', 'code-content');
            </script>
          </body>
          </html>
          EOL
        continue-on-error: true

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: analysis-reports
          path: reports/
          if-no-files-found: warn
  deploy:
    needs: report
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist
      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          name: analysis-reports
          path: dist/reports
      - name: Deploy üöÄ
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist
          branch: gh-pages
