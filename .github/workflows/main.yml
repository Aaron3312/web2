name: Deploy to GitHub Pages
on:
  push:
    branches: [main, master]
  workflow_dispatch:
permissions:
  contents: write
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: cypress-binary-${{ hashFiles('package-lock.json') }}
          restore-keys: cypress-binary-
      - name: Run Cypress tests
        uses: cypress-io/github-action@v5
        with:
          build: npm run build
          start: npm run dev
          wait-on: "http://localhost:5173"
        continue-on-error: true # Permite continuar incluso si los tests fallan
        id: cypress
      - name: Upload screenshots on failure
        uses: actions/upload-artifact@v4
        if: steps.cypress.outcome == 'failure'
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: ignore
      - name: Upload videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos
          if-no-files-found: ignore
      # Marca el job como fallido pero permite que contin√∫e el flujo de trabajo
      - name: Mark test job as failed
        if: steps.cypress.outcome == 'failure'
        run: echo "::warning::Cypress tests failed but workflow will continue"
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Cache build
        uses: actions/cache@v3
        with:
          path: |
            node_modules/.vite
            dist
          key: build-${{ github.sha }}
          restore-keys: |
            build-
      - name: Build
        run: npm run build
        env:
          VITE_TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      - name: Create 404 page
        run: cp dist/index.html dist/404.html
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist
      - name: Deploy üöÄ
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist
          branch: gh-pages
  report:
    needs: build
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Setup working environment
        run: |
          echo "Preparando entorno de trabajo..."
          # Limpiar directorios anteriores para evitar conflictos
          rm -rf reports cypress/videos cypress/screenshots dist artifacts
          mkdir -p reports cypress/videos cypress/screenshots

          # Mostrar informaci√≥n del sistema para depuraci√≥n
          echo "=== Informaci√≥n del sistema ==="
          echo "Espacio disponible:"
          df -h
          echo "Versi√≥n de Node:"
          node --version
          echo "Versi√≥n de npm:"
          npm --version
          echo "=== Directorio de trabajo ==="
          pwd

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: cypress-videos
          path: cypress/videos
        continue-on-error: true

      - name: Download screenshots if available
        uses: actions/download-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots
        continue-on-error: true

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist
        continue-on-error: true

      # Recopilar informaci√≥n del repositorio y CI/CD
      - name: Collect CI/CD and Repository Information
        id: collect-info
        run: |
          # Crear directorio para reportes
          mkdir -p reports

          # Recopilar informaci√≥n del commit y workflow
          echo "# Informaci√≥n del Despliegue" > reports/cicd-report.md
          echo "## Detalles del Despliegue" >> reports/cicd-report.md
          echo "- **Commit:** \`${{ github.sha }}\`" >> reports/cicd-report.md
          echo "- **Rama:** \`${{ github.ref_name }}\`" >> reports/cicd-report.md
          echo "- **Workflow:** \`${{ github.workflow }}\`" >> reports/cicd-report.md
          echo "- **Iniciado por:** \`${{ github.actor }}\`" >> reports/cicd-report.md
          echo "- **Fecha:** \`$(date)\`" >> reports/cicd-report.md

          # Cambios en este despliegue
          echo "## Cambios en este Despliegue" >> reports/cicd-report.md
          git log -1 --pretty=format:"- **Autor:** %an%n- **Fecha:** %ad%n- **Mensaje:** %s%n%n**Descripci√≥n completa:**%n%b" >> reports/cicd-report.md

          # Historia reciente de cambios (√∫ltimos 5)
          echo -e "\n## Historia Reciente (√öltimos 5 Commits)" >> reports/cicd-report.md
          git log -5 --pretty=format:"- %h - %s (%an, %ar)" >> reports/cicd-report.md

          # Agregar informaci√≥n de tests
          echo -e "\n## An√°lisis de Tests" >> reports/cicd-report.md

          # Verificar si hay videos de Cypress (probar diferentes rutas posibles)
          if [ -d "cypress/videos" ]; then
            VIDEOS_DIR="cypress/videos"
          else
            VIDEOS_DIR=""
          fi

          if [ -n "$VIDEOS_DIR" ]; then
            # Contar archivos de video
            TEST_COUNT=$(find $VIDEOS_DIR -name "*.mp4" 2>/dev/null | wc -l)
            echo "- **Total de tests:** $TEST_COUNT" >> reports/cicd-report.md
            
            # Verificar la ruta de screenshots
            if [ -d "cypress/screenshots" ]; then
              SCREENSHOTS_DIR="cypress/screenshots"
            else
              SCREENSHOTS_DIR=""
            fi
            
            # Verificar si hay capturas de pantalla de tests fallidos
            SCREENSHOT_COUNT=0
            if [ -n "$SCREENSHOTS_DIR" ]; then
              SCREENSHOT_COUNT=$(find $SCREENSHOTS_DIR -type f 2>/dev/null | wc -l)
            fi
            
            if [ "$SCREENSHOT_COUNT" -gt 0 ]; then
              echo "- **Tests fallidos:** $SCREENSHOT_COUNT (basado en capturas de pantalla)" >> reports/cicd-report.md
              echo "- **Tasa de √©xito:** $(( 100 - ($SCREENSHOT_COUNT * 100 / $TEST_COUNT) ))%" >> reports/cicd-report.md
              
              echo "### Tests Fallidos" >> reports/cicd-report.md
              echo "Las siguientes pruebas fallaron durante la ejecuci√≥n:" >> reports/cicd-report.md
              
              find $SCREENSHOTS_DIR -type f | sort | while read screenshot; do
                # Extraer nombre del test de la ruta del archivo
                TEST_NAME=$(echo "$screenshot" | sed -E 's|.*/([^/]+)/([^/]+)\.png|\1 - \2|g' | sed 's/_/ /g')
                echo "- $TEST_NAME" >> reports/cicd-report.md
              done
            else
              echo "- **Tests fallidos:** 0" >> reports/cicd-report.md
              echo "- **Tasa de √©xito:** 100%" >> reports/cicd-report.md
              echo "### Resultado" >> reports/cicd-report.md
              echo "‚úÖ Todos los tests pasaron correctamente" >> reports/cicd-report.md
            fi
          else
            echo "‚ö†Ô∏è No se encontraron resultados de tests para analizar." >> reports/cicd-report.md
          fi

          # Agregar informaci√≥n del build
          echo -e "\n## Informaci√≥n del Build" >> reports/cicd-report.md

          # Verificar tama√±o del build (probar diferentes rutas posibles)
          if [ -d "dist" ]; then
            BUILD_DIR="dist"
          else
            BUILD_DIR=""
          fi

          if [ -n "$BUILD_DIR" ]; then
            BUILD_SIZE=$(du -sh $BUILD_DIR | cut -f1)
            FILE_COUNT=$(find $BUILD_DIR -type f | wc -l)
            
            echo "- **Tama√±o del build:** $BUILD_SIZE" >> reports/cicd-report.md
            echo "- **Archivos generados:** $FILE_COUNT" >> reports/cicd-report.md
            
            # Mostrar tipos de archivos
            echo "### Tipos de Archivos en el Build" >> reports/cicd-report.md
            echo "\`\`\`" >> reports/cicd-report.md
            find $BUILD_DIR -type f | grep -v "node_modules" | sort | awk -F. '{print $NF}' | sort | uniq -c | sort -nr >> reports/cicd-report.md
            echo "\`\`\`" >> reports/cicd-report.md
          else
            echo "- **Datos del build:** No disponibles" >> reports/cicd-report.md
          fi
        continue-on-error: true

      # Generaci√≥n de an√°lisis con OpenAI GPT-4o
      - name: Generate OpenAI CI/CD Analysis
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
        run: |
          echo "Generando an√°lisis con OpenAI GPT-4o..."

          # Verificar que tenemos la clave API
          if [ -z "$OPENAI_KEY" ]; then
            echo "‚ö†Ô∏è AVISO: No se encontr√≥ la clave API de OpenAI. No se realizar√° an√°lisis avanzado." >> reports/cicd-report.md
          else
            # Crear archivo con el contenido del workflow para la solicitud
            WORKFLOW_CONTENT=$(cat .github/workflows/*.yml)
            echo "$WORKFLOW_CONTENT" > workflow_content.txt
            
            # Crear archivo con la informaci√≥n del build
            BUILD_INFO=""
            if [ -f "reports/cicd-report.md" ]; then
              BUILD_INFO=$(cat reports/cicd-report.md)
              echo "$BUILD_INFO" > build_info.txt
            fi
            
            # Construir el prompt para OpenAI
            PROMPT="Analiza este workflow de GitHub Actions y proporciona un informe detallado sobre el pipeline de CI/CD. 
            Eval√∫a lo siguiente:
            1. La estructura general del workflow y si sigue buenas pr√°cticas
            2. La eficiencia de las etapas de build y test
            3. La seguridad y confiabilidad del proceso de despliegue
            4. Recomendaciones espec√≠ficas para mejorar el pipeline
            
            Responde en formato Markdown con secciones claras. Enf√≥cate exclusivamente en el proceso de CI/CD, no en el c√≥digo fuente.
            
            Informaci√≥n adicional sobre el build est√° en el archivo build_info.txt.
            El workflow est√° en el archivo workflow_content.txt."
            
            # Guardar el prompt para referencia
            echo "$PROMPT" > prompt.txt
            
            # Llamar a la API de OpenAI con curl
            curl -s https://api.openai.com/v1/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_KEY" \
              -d "{
                \"model\": \"gpt-4o\",
                \"messages\": [
                  {\"role\": \"system\", \"content\": \"Eres un experto en DevOps y CI/CD que analiza workflows de GitHub Actions y proporciona recomendaciones t√©cnicas detalladas.\"},
                  {\"role\": \"user\", \"content\": \"$PROMPT\"},
                  {\"role\": \"user\", \"content\": {\"type\": \"text\", \"text\": \"Informaci√≥n del build:\"}},
                  {\"role\": \"user\", \"content\": {\"type\": \"file_path\", \"file_path\": \"build_info.txt\"}},
                  {\"role\": \"user\", \"content\": {\"type\": \"text\", \"text\": \"Contenido del workflow:\"}},
                  {\"role\": \"user\", \"content\": {\"type\": \"file_path\", \"file_path\": \"workflow_content.txt\"}}
                ],
                \"temperature\": 0.2,
                \"max_tokens\": 2000
              }" > raw_response.json
            
            # Si necesitamos una versi√≥n m√°s simple debido a errores de formato
            if ! cat raw_response.json | jq -e '.choices[0].message.content' > /dev/null 2>&1; then
              # Enfoque alternativo sin archivos adjuntos
              echo "Intentando solicitud alternativa a OpenAI..."
              
              # Limitar tama√±o del contenido para evitar problemas
              WORKFLOW_CONTENT_SHORT=$(head -c 2500 workflow_content.txt)
              BUILD_INFO_SHORT=$(head -c 2500 build_info.txt)
              
              PROMPT_SIMPLE="Analiza este workflow de GitHub Actions y proporciona un informe detallado sobre el pipeline de CI/CD.
              Eval√∫a: estructura general, eficiencia, seguridad, y recomendaciones de mejora.
              
              Informaci√≥n del build:
              $BUILD_INFO_SHORT
              
              Workflow:
              $WORKFLOW_CONTENT_SHORT"
              
              # Escapar comillas dobles para JSON
              PROMPT_JSON=$(echo "$PROMPT_SIMPLE" | sed 's/"/\\"/g')
              
              curl -s https://api.openai.com/v1/chat/completions \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $OPENAI_KEY" \
                -d "{
                  \"model\": \"gpt-4o\",
                  \"messages\": [
                    {\"role\": \"system\", \"content\": \"Eres un experto en DevOps y CI/CD.\"},
                    {\"role\": \"user\", \"content\": \"$PROMPT_JSON\"}
                  ],
                  \"temperature\": 0.2,
                  \"max_tokens\": 2000
                }" > raw_response.json
            fi
            
            # Extraer el contenido de la respuesta con jq
            if cat raw_response.json | jq -e '.choices[0].message.content' > /dev/null 2>&1; then
              ANALYSIS=$(cat raw_response.json | jq -r '.choices[0].message.content')
              
              echo -e "\n# An√°lisis de CI/CD por OpenAI GPT-4o\n" >> reports/cicd-report.md
              echo "$ANALYSIS" >> reports/cicd-report.md
            else
              # Si jq falla, intentar extraer con grep
              ANALYSIS=$(cat raw_response.json | grep -o '"content":"[^"]*"' | sed 's/"content":"\(.*\)"/\1/' | sed 's/\\n/\n/g')
              
              if [ -n "$ANALYSIS" ]; then
                echo -e "\n# An√°lisis de CI/CD por OpenAI GPT-4o\n" >> reports/cicd-report.md
                echo "$ANALYSIS" >> reports/cicd-report.md
              else
                echo -e "\n# Error en An√°lisis de OpenAI GPT-4o\n" >> reports/cicd-report.md
                echo "No se pudo obtener un an√°lisis de OpenAI. Respuesta de la API:" >> reports/cicd-report.md
                echo "\`\`\`json" >> reports/cicd-report.md
                cat raw_response.json >> reports/cicd-report.md
                echo "\`\`\`" >> reports/cicd-report.md
              fi
            fi
            
            # Limpiar archivos temporales
            rm -f workflow_content.txt build_info.txt prompt.txt raw_response.json
          fi
        continue-on-error: true

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: cicd-report
          path: reports/
          if-no-files-found: warn
